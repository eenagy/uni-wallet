{"ast":null,"code":"import { CurrencyAmount, JSBI } from '@uniswap/sdk'; // TODO to return actual amount\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\n\nexport function useETHBalances(uncheckedAddresses) {\n  // const multicallContract = useMulticallContract()\n  // const addresses: string[] = useMemo(\n  //   () =>\n  //     uncheckedAddresses\n  //       ? uncheckedAddresses\n  //           .map(isAddress)\n  //           .filter((a): a is string => a !== false)\n  //           .sort()\n  //       : [],\n  //   [uncheckedAddresses]\n  // )\n  // const results = useSingleContractMultipleData(\n  //   multicallContract,\n  //   'getEthBalance',\n  //   addresses.map(address => [address])\n  // )\n  // return useMemo(\n  //   () =>\n  //     addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\n  //       const value = results?.[i]?.result?.[0]\n  //       if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\n  //       return memo\n  //     }, {}),\n  //   [addresses, results]\n  // )\n  return {\n    \"\": CurrencyAmount.ether(JSBI.BigInt(0))\n  };\n}","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/state/wallet/hooks.tsx"],"names":["CurrencyAmount","JSBI","useETHBalances","uncheckedAddresses","ether","BigInt"],"mappings":"AACA,SAASA,cAAT,EAAyBC,IAAzB,QAAqC,cAArC,C,CAEA;;AACA;AACA;AACA;;AACC,OAAO,SAASC,cAAT,CACJC,kBADI,EAE+C;AACnD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO;AAAE,QAAKH,cAAc,CAACI,KAAf,CAAqBH,IAAI,CAACI,MAAL,CAAY,CAAZ,CAArB;AAAP,GAAP;AACD","sourcesContent":["\nimport { CurrencyAmount, JSBI } from '@uniswap/sdk'\n\n// TODO to return actual amount\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\n export function useETHBalances(\n    uncheckedAddresses?: (string | undefined)[]\n  ): { [address: string]: CurrencyAmount | undefined } {\n    // const multicallContract = useMulticallContract()\n  \n    // const addresses: string[] = useMemo(\n    //   () =>\n    //     uncheckedAddresses\n    //       ? uncheckedAddresses\n    //           .map(isAddress)\n    //           .filter((a): a is string => a !== false)\n    //           .sort()\n    //       : [],\n    //   [uncheckedAddresses]\n    // )\n  \n    // const results = useSingleContractMultipleData(\n    //   multicallContract,\n    //   'getEthBalance',\n    //   addresses.map(address => [address])\n    // )\n  \n    // return useMemo(\n    //   () =>\n    //     addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\n    //       const value = results?.[i]?.result?.[0]\n    //       if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\n    //       return memo\n    //     }, {}),\n    //   [addresses, results]\n    // )\n    return { \"\" : CurrencyAmount.ether(JSBI.BigInt(0))}\n  }"]},"metadata":{},"sourceType":"module"}