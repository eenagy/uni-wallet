{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useActiveWeb3React } from '../../hooks';\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx) {\n  return new Date().getTime() - tx.addedTime < 86400000;\n} // returns all the transactions for the current chain\n\nexport function useAllTransactions() {\n  _s();\n\n  var _state$chainId;\n\n  var _useActiveWeb3React = useActiveWeb3React(),\n      chainId = _useActiveWeb3React.chainId; // TODO \n\n\n  var state = {\n    chainId: null\n  }; // @ts-ignore\n\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\n\n_s(useAllTransactions, \"Srgj51dvRDiLRw5YTqb92Ixo5OU=\", false, function () {\n  return [useActiveWeb3React];\n});\n\nexport function clearAllTransactions() {}","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/state/transactions/hooks.tsx"],"names":["useActiveWeb3React","isTransactionRecent","tx","Date","getTime","addedTime","useAllTransactions","chainId","state","clearAllTransactions"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,aAAnC;;AAwBA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAT,CAA6BC,EAA7B,EAA8D;AACnE,SAAO,IAAIC,IAAJ,GAAWC,OAAX,KAAuBF,EAAE,CAACG,SAA1B,GAAsC,QAA7C;AACD,C,CAED;;AACA,OAAO,SAASC,kBAAT,GAAwE;AAAA;;AAAA;;AAAA,4BACzDN,kBAAkB,EADuC;AAAA,MACrEO,OADqE,uBACrEA,OADqE,EAG7E;;;AACA,MAAMC,KAAK,GAAG;AAAED,IAAAA,OAAO,EAAE;AAAX,GAAd,CAJ6E,CAM7E;;AACA,SAAOA,OAAO,qBAAGC,KAAK,CAACD,OAAD,CAAR,2DAAqB,EAArB,GAA0B,EAAxC;AACD;;GAReD,kB;UACMN,kB;;;AAStB,OAAO,SAASS,oBAAT,GAA+B,CAErC","sourcesContent":["import { useActiveWeb3React } from '../../hooks'\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  // TODO \n  const state = { chainId: null };\n\n  // @ts-ignore\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function clearAllTransactions(){\n  \n}"]},"metadata":{},"sourceType":"module"}