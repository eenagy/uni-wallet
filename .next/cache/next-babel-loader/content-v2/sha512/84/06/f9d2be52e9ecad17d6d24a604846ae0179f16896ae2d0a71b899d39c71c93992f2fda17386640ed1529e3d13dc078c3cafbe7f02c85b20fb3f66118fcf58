{"ast":null,"code":"// import { namehash } from 'ethers/lib/utils'\n// import { useMemo } from 'react'\n// import { useSingleCallResult } from '../state/multicall/hooks'\n// import { isAddress } from '../utils'\n// import isZero from '../utils/isZero'\n// import { useENSRegistrarContract, useENSResolverContract } from './useContract'\n// import useDebounce from './useDebounce'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address) {\n  //   const debouncedAddress = useDebounce(address, 200)\n  //   const ensNodeArgument = useMemo(() => {\n  //     if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n  //     try {\n  //       return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\n  //     } catch (error) {\n  //       return [undefined]\n  //     }\n  //   }, [debouncedAddress])\n  //   const registrarContract = useENSRegistrarContract(false)\n  //   const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  //   const resolverAddressResult = resolverAddress.result?.[0]\n  //   const resolverContract = useENSResolverContract(\n  //     resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n  //     false\n  //   )\n  //   const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n  //   const changed = debouncedAddress !== address\n  //   return {\n  //     ENSName: changed ? null : name.result?.[0] ?? null,\n  //     loading: changed || resolverAddress.loading || name.loading\n  //   }\n  // TODO\n  return {\n    ENSName: null,\n    loading: false\n  };\n}","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/hooks/useENSName.tsx"],"names":["useENSName","address","ENSName","loading"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAASA,UAAT,CAAoBC,OAApB,EAAoF;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACE;AACA,SAAO;AACLC,IAAAA,OAAO,EAAE,IADJ;AAELC,IAAAA,OAAO,EAAE;AAFJ,GAAP;AAID","sourcesContent":["// import { namehash } from 'ethers/lib/utils'\n// import { useMemo } from 'react'\n// import { useSingleCallResult } from '../state/multicall/hooks'\n// import { isAddress } from '../utils'\n// import isZero from '../utils/isZero'\n// import { useENSRegistrarContract, useENSResolverContract } from './useContract'\n// import useDebounce from './useDebounce'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\n//   const debouncedAddress = useDebounce(address, 200)\n//   const ensNodeArgument = useMemo(() => {\n//     if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n//     try {\n//       return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\n//     } catch (error) {\n//       return [undefined]\n//     }\n//   }, [debouncedAddress])\n//   const registrarContract = useENSRegistrarContract(false)\n//   const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n//   const resolverAddressResult = resolverAddress.result?.[0]\n//   const resolverContract = useENSResolverContract(\n//     resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n//     false\n//   )\n//   const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n\n//   const changed = debouncedAddress !== address\n//   return {\n//     ENSName: changed ? null : name.result?.[0] ?? null,\n//     loading: changed || resolverAddress.loading || name.loading\n//   }\n  // TODO\n  return {\n    ENSName: null,\n    loading: false\n  }\n}\n"]},"metadata":{},"sourceType":"module"}