{"ast":null,"code":"import { getAddress } from '@ethersproject/address';\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch (_unused) {\n    return false;\n  }\n}\nvar ETHERSCAN_PREFIXES = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.'\n}; // shorten the checksummed version of the input address to have 0x + 4 characters at start and end\n\nexport function shortenAddress(address) {\n  var chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var parsed = isAddress(address);\n\n  if (!parsed) {\n    throw Error(\"Invalid 'address' parameter '\".concat(address, \"'.\"));\n  }\n\n  return \"\".concat(parsed.substring(0, chars + 2), \"...\").concat(parsed.substring(42 - chars));\n}\nexport function getEtherscanLink(chainId, data, type) {\n  var prefix = \"https://\".concat(ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1], \"etherscan.io\");\n\n  switch (type) {\n    case 'transaction':\n      {\n        return \"\".concat(prefix, \"/tx/\").concat(data);\n      }\n\n    case 'token':\n      {\n        return \"\".concat(prefix, \"/token/\").concat(data);\n      }\n\n    case 'block':\n      {\n        return \"\".concat(prefix, \"/block/\").concat(data);\n      }\n\n    case 'address':\n    default:\n      {\n        return \"\".concat(prefix, \"/address/\").concat(data);\n      }\n  }\n}","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/utils/index.ts"],"names":["getAddress","isAddress","value","ETHERSCAN_PREFIXES","shortenAddress","address","chars","parsed","Error","substring","getEtherscanLink","chainId","data","type","prefix"],"mappings":"AAAA,SAASA,UAAT,QAA2B,wBAA3B;AAGA;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA+C;AACpD,MAAI;AACF,WAAOF,UAAU,CAACE,KAAD,CAAjB;AACD,GAFD,CAEE,gBAAM;AACN,WAAO,KAAP;AACD;AACF;AACD,IAAMC,kBAAoD,GAAG;AAC3D,KAAG,EADwD;AAE3D,KAAG,UAFwD;AAG3D,KAAG,UAHwD;AAI3D,KAAG,SAJwD;AAK3D,MAAI;AALuD,CAA7D,C,CAQA;;AACA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAA4D;AAAA,MAAnBC,KAAmB,uEAAX,CAAW;AACjE,MAAMC,MAAM,GAAGN,SAAS,CAACI,OAAD,CAAxB;;AACA,MAAI,CAACE,MAAL,EAAa;AACX,UAAMC,KAAK,wCAAiCH,OAAjC,QAAX;AACD;;AACD,mBAAUE,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoBH,KAAK,GAAG,CAA5B,CAAV,gBAA8CC,MAAM,CAACE,SAAP,CAAiB,KAAKH,KAAtB,CAA9C;AACD;AAED,OAAO,SAASI,gBAAT,CACLC,OADK,EAELC,IAFK,EAGLC,IAHK,EAIG;AACR,MAAMC,MAAM,qBAAcX,kBAAkB,CAACQ,OAAD,CAAlB,IAA+BR,kBAAkB,CAAC,CAAD,CAA/D,iBAAZ;;AAEA,UAAQU,IAAR;AACE,SAAK,aAAL;AAAoB;AAClB,yBAAUC,MAAV,iBAAuBF,IAAvB;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,yBAAUE,MAAV,oBAA0BF,IAA1B;AACD;;AACD,SAAK,OAAL;AAAc;AACZ,yBAAUE,MAAV,oBAA0BF,IAA1B;AACD;;AACD,SAAK,SAAL;AACA;AAAS;AACP,yBAAUE,MAAV,sBAA4BF,IAA5B;AACD;AAbH;AAeD","sourcesContent":["import { getAddress } from '@ethersproject/address'\nimport { ChainId } from '@uniswap/sdk'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.',\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}