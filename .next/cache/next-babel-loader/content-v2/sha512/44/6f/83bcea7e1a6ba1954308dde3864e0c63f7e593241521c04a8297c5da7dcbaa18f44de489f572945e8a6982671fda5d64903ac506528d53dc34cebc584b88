{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _CHAIN_ID_NETWORK_ARG;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { ChainId } from '@uniswap/sdk';\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector';\nexport var OVERLAY_READY = 'OVERLAY_READY';\nvar CHAIN_ID_NETWORK_ARGUMENT = (_CHAIN_ID_NETWORK_ARG = {}, _defineProperty(_CHAIN_ID_NETWORK_ARG, ChainId.MAINNET, undefined), _defineProperty(_CHAIN_ID_NETWORK_ARG, ChainId.ROPSTEN, 'ropsten'), _defineProperty(_CHAIN_ID_NETWORK_ARG, ChainId.RINKEBY, 'rinkeby'), _defineProperty(_CHAIN_ID_NETWORK_ARG, ChainId.KOVAN, 'kovan'), _CHAIN_ID_NETWORK_ARG);\nexport var FortmaticConnector = /*#__PURE__*/function (_FortmaticConnectorCo) {\n  _inherits(FortmaticConnector, _FortmaticConnectorCo);\n\n  var _super = _createSuper(FortmaticConnector);\n\n  function FortmaticConnector() {\n    _classCallCheck(this, FortmaticConnector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FortmaticConnector, [{\n    key: \"activate\",\n    value: function () {\n      var _activate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var _yield$import, Fortmatic, _ref, apiKey, chainId, provider, pollForOverlayReady, _yield$Promise$all, _yield$Promise$all2, account;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.fortmatic) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 3;\n                return import('fortmatic');\n\n              case 3:\n                _yield$import = _context.sent;\n                Fortmatic = _yield$import[\"default\"];\n                _ref = this, apiKey = _ref.apiKey, chainId = _ref.chainId;\n\n                if (!(chainId in CHAIN_ID_NETWORK_ARGUMENT)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId]);\n                _context.next = 11;\n                break;\n\n              case 10:\n                throw new Error(\"Unsupported network ID: \".concat(chainId));\n\n              case 11:\n                provider = this.fortmatic.getProvider();\n                pollForOverlayReady = new Promise(function (resolve) {\n                  var interval = setInterval(function () {\n                    if (provider.overlayReady) {\n                      clearInterval(interval);\n\n                      _this.emit(OVERLAY_READY);\n\n                      resolve();\n                    }\n                  }, 200);\n                });\n                _context.next = 15;\n                return Promise.all([provider.enable().then(function (accounts) {\n                  return accounts[0];\n                }), pollForOverlayReady]);\n\n              case 15:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);\n                account = _yield$Promise$all2[0];\n                return _context.abrupt(\"return\", {\n                  provider: this.fortmatic.getProvider(),\n                  chainId: this.chainId,\n                  account: account\n                });\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function activate() {\n        return _activate.apply(this, arguments);\n      }\n\n      return activate;\n    }()\n  }]);\n\n  return FortmaticConnector;\n}(FortmaticConnectorCore);","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/connectors/Fortmatic.ts"],"names":["ChainId","FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","undefined","ROPSTEN","RINKEBY","KOVAN","fortmatic","Fortmatic","apiKey","chainId","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","all","enable","then","accounts","account"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAkB,IAAIC,sBAA/B,QAA6D,iCAA7D;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAIP,IAAMC,yBAAgG,uEACnGJ,OAAO,CAACK,OAD2F,EACjFC,SADiF,0CAEnGN,OAAO,CAACO,OAF2F,EAEjF,SAFiF,0CAGnGP,OAAO,CAACQ,OAH2F,EAGjF,SAHiF,0CAInGR,OAAO,CAACS,KAJ2F,EAInF,OAJmF,yBAAtG;AAOA,WAAaR,kBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAES,KAAKS,SAFd;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAG2C,OAAO,WAAP,CAH3C;;AAAA;AAAA;AAGuBC,gBAAAA,SAHvB;AAAA,uBAKkC,IALlC,EAKcC,MALd,QAKcA,MALd,EAKsBC,OALtB,QAKsBA,OALtB;;AAAA,sBAMUA,OAAO,IAAIT,yBANrB;AAAA;AAAA;AAAA;;AAOQ,qBAAKM,SAAL,GAAiB,IAAIC,SAAJ,CAAcC,MAAd,EAAsBR,yBAAyB,CAACS,OAAD,CAA/C,CAAjB;AAPR;AAAA;;AAAA;AAAA,sBASc,IAAIC,KAAJ,mCAAqCD,OAArC,EATd;;AAAA;AAaUE,gBAAAA,QAbV,GAaqB,KAAKL,SAAL,CAAeM,WAAf,EAbrB;AAeUC,gBAAAA,mBAfV,GAegC,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACjD,sBAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjC,wBAAIN,QAAQ,CAACO,YAAb,EAA2B;AACzBC,sBAAAA,aAAa,CAACH,QAAD,CAAb;;AACA,sBAAA,KAAI,CAACI,IAAL,CAAUrB,aAAV;;AACAgB,sBAAAA,OAAO;AACR;AACF,mBAN2B,EAMzB,GANyB,CAA5B;AAOD,iBAR2B,CAfhC;AAAA;AAAA,uBAyB4BD,OAAO,CAACO,GAAR,CAAY,CAClCV,QAAQ,CAACW,MAAT,GAAkBC,IAAlB,CAAuB,UAACC,QAAD;AAAA,yBAAwBA,QAAQ,CAAC,CAAD,CAAhC;AAAA,iBAAvB,CADkC,EAElCX,mBAFkC,CAAZ,CAzB5B;;AAAA;AAAA;AAAA;AAyBWY,gBAAAA,OAzBX;AAAA,iDA8BW;AAAEd,kBAAAA,QAAQ,EAAE,KAAKL,SAAL,CAAeM,WAAf,EAAZ;AAA0CH,kBAAAA,OAAO,EAAG,IAAD,CAAcA,OAAjE;AAA0EgB,kBAAAA,OAAO,EAAPA;AAA1E,iBA9BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAwC3B,sBAAxC","sourcesContent":["import { ChainId } from '@uniswap/sdk'\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector'\n\nexport const OVERLAY_READY = 'OVERLAY_READY'\n\ntype FormaticSupportedChains = Extract<ChainId, ChainId.MAINNET | ChainId.ROPSTEN | ChainId.RINKEBY | ChainId.KOVAN>\n\nconst CHAIN_ID_NETWORK_ARGUMENT: { readonly [chainId in FormaticSupportedChains]: string | undefined } = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.ROPSTEN]: 'ropsten',\n  [ChainId.RINKEBY]: 'rinkeby',\n  [ChainId.KOVAN]: 'kovan'\n}\n\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic')\n\n      const { apiKey, chainId } = this as any\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId as FormaticSupportedChains])\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`)\n      }\n    }\n\n    const provider = this.fortmatic.getProvider()\n\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval)\n          this.emit(OVERLAY_READY)\n          resolve()\n        }\n      }, 200)\n    })\n\n    const [account] = await Promise.all([\n      provider.enable().then((accounts: string[]) => accounts[0]),\n      pollForOverlayReady\n    ])\n\n    return { provider: this.fortmatic.getProvider(), chainId: (this as any).chainId, account }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}