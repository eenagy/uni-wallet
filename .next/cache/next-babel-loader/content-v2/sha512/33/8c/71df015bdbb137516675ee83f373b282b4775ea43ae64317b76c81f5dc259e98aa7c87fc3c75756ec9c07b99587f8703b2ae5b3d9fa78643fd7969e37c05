{"ast":null,"code":"import _defineProperty from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _process$env$REACT_AP;\n\nimport { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { FortmaticConnector } from './Fortmatic';\nimport { NetworkConnector } from './NetworkConnector';\nvar NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\nvar FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY;\nvar PORTIS_ID = process.env.REACT_APP_PORTIS_ID;\nexport var NETWORK_CHAIN_ID = parseInt((_process$env$REACT_AP = process.env.REACT_APP_CHAIN_ID) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : '1');\nconsole.log(process.env);\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(\"REACT_APP_NETWORK_URL must be a defined environment variable\");\n}\n\nexport var network = new NetworkConnector({\n  urls: _defineProperty({}, NETWORK_CHAIN_ID, NETWORK_URL)\n});\nvar networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport var injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n}); // mainnet only\n\nexport var walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000\n}); // mainnet only\n\nexport var fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY !== null && FORMATIC_KEY !== void 0 ? FORMATIC_KEY : '',\n  chainId: 1\n}); // mainnet only\n\nexport var portis = new PortisConnector({\n  dAppId: PORTIS_ID !== null && PORTIS_ID !== void 0 ? PORTIS_ID : '',\n  networks: [1]\n}); // mainnet only\n\nexport var walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl: 'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n});","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/connectors/index.ts"],"names":["Web3Provider","InjectedConnector","WalletConnectConnector","WalletLinkConnector","PortisConnector","FortmaticConnector","NetworkConnector","NETWORK_URL","process","env","REACT_APP_NETWORK_URL","FORMATIC_KEY","REACT_APP_FORTMATIC_KEY","PORTIS_ID","REACT_APP_PORTIS_ID","NETWORK_CHAIN_ID","parseInt","REACT_APP_CHAIN_ID","console","log","Error","network","urls","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","fortmatic","apiKey","chainId","portis","dAppId","networks","walletlink","url","appName","appLogoUrl"],"mappings":";;;;AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AAEA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAhC;AACA,IAAMC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYG,uBAAjC;AACA,IAAMC,SAAS,GAAGL,OAAO,CAACC,GAAR,CAAYK,mBAA9B;AAEA,OAAO,IAAMC,gBAAwB,GAAGC,QAAQ,0BAACR,OAAO,CAACC,GAAR,CAAYQ,kBAAb,yEAAmC,GAAnC,CAAzC;AACPC,OAAO,CAACC,GAAR,CAAYX,OAAO,CAACC,GAApB;;AACA,IAAI,OAAOF,WAAP,KAAuB,WAA3B,EAAwC;AACtC,QAAM,IAAIa,KAAJ,gEAAN;AACD;;AAED,OAAO,IAAMC,OAAO,GAAG,IAAIf,gBAAJ,CAAqB;AAC1CgB,EAAAA,IAAI,sBAAKP,gBAAL,EAAwBR,WAAxB;AADsC,CAArB,CAAhB;AAIP,IAAIgB,cAAJ;AACA,OAAO,SAASC,iBAAT,GAA2C;AAAA;;AAChD,SAAQD,cAAc,sBAAGA,cAAH,6DAAqB,IAAIvB,YAAJ,CAAiBqB,OAAO,CAACI,QAAzB,CAA3C;AACD;AAED,OAAO,IAAMC,QAAQ,GAAG,IAAIzB,iBAAJ,CAAsB;AAC5C0B,EAAAA,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb;AADyB,CAAtB,CAAjB,C,CAIP;;AACA,OAAO,IAAMC,aAAa,GAAG,IAAI1B,sBAAJ,CAA2B;AACtD2B,EAAAA,GAAG,EAAE;AAAE,OAAGtB;AAAL,GADiD;AAEtDuB,EAAAA,MAAM,EAAE,kCAF8C;AAGtDC,EAAAA,MAAM,EAAE,IAH8C;AAItDC,EAAAA,eAAe,EAAE;AAJqC,CAA3B,CAAtB,C,CAOP;;AACA,OAAO,IAAMC,SAAS,GAAG,IAAI5B,kBAAJ,CAAuB;AAC9C6B,EAAAA,MAAM,EAAEvB,YAAF,aAAEA,YAAF,cAAEA,YAAF,GAAkB,EADsB;AAE9CwB,EAAAA,OAAO,EAAE;AAFqC,CAAvB,CAAlB,C,CAKP;;AACA,OAAO,IAAMC,MAAM,GAAG,IAAIhC,eAAJ,CAAoB;AACxCiC,EAAAA,MAAM,EAAExB,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAe,EADmB;AAExCyB,EAAAA,QAAQ,EAAE,CAAC,CAAD;AAF8B,CAApB,CAAf,C,CAKP;;AACA,OAAO,IAAMC,UAAU,GAAG,IAAIpC,mBAAJ,CAAwB;AAChDqC,EAAAA,GAAG,EAAEjC,WAD2C;AAEhDkC,EAAAA,OAAO,EAAE,SAFuC;AAGhDC,EAAAA,UAAU,EACR;AAJ8C,CAAxB,CAAnB","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\n\nimport { FortmaticConnector } from './Fortmatic'\nimport { NetworkConnector } from './NetworkConnector'\n\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID\n\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '1')\nconsole.log(process.env)\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`)\n}\n\nexport const network = new NetworkConnector({\n  urls: { [NETWORK_CHAIN_ID]: NETWORK_URL }\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n})\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: NETWORK_URL },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000\n})\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY ?? '',\n  chainId: 1\n})\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID ?? '',\n  networks: [1]\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl:\n    'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n})\n"]},"metadata":{},"sourceType":"module"}