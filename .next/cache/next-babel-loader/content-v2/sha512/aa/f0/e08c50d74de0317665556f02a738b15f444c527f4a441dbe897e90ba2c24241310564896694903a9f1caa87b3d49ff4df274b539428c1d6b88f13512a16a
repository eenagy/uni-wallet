{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/admin/workspace/smart_contracts/uni-wallet/src/components/pages/Web3ReactManager.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport Loader from '../Loader';\nvar MessageWrapper = styled.div.withConfig({\n  displayName: \"Web3ReactManager__MessageWrapper\",\n  componentId: \"sc-1dp0k9x-0\"\n})([\"display:flex;align-items:center;justify-content:center;height:20rem;\"]);\n_c = MessageWrapper;\nvar Message = styled.h2.withConfig({\n  displayName: \"Web3ReactManager__Message\",\n  componentId: \"sc-1dp0k9x-1\"\n})([\"color:\", \";\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.secondary1;\n});\n_c2 = Message;\nexport function Web3ReactManager(_ref2) {\n  _s();\n\n  var children = _ref2.children;\n\n  var _useWeb3React = useWeb3React(),\n      active = _useWeb3React.active;\n\n  var _useWeb3React2 = useWeb3React(NetworkContextName),\n      networkActive = _useWeb3React2.active,\n      networkError = _useWeb3React2.error,\n      activateNetwork = _useWeb3React2.activate; // try to eagerly connect to an injected provider, if it exists and has granted access already\n\n\n  var triedEager = useEagerConnect(); // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n\n  useEffect(function () {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]); // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n\n  useInactiveListener(!triedEager); // handle delayed loader state\n\n  var _useState = useState(false),\n      showLoader = _useState[0],\n      setShowLoader = _useState[1];\n\n  useEffect(function () {\n    var timeout = setTimeout(function () {\n      setShowLoader(true);\n    }, 600);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, []); // on page load, do nothing until we've tried to connect to the injected connector\n\n  if (!triedEager) {\n    return null;\n  } // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n\n\n  if (!active && networkError) {\n    return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Message, {\n        children: 'unknownError'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  } // if neither context is active, spin\n\n\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/_jsxDEV(MessageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this) : null;\n  }\n\n  return children;\n}\n\n_s(Web3ReactManager, \"hiQkfN2w+jO6onBERO0nDHlavyE=\", false, function () {\n  return [useWeb3React, useWeb3React, useEagerConnect, useInactiveListener];\n});\n\n_c3 = Web3ReactManager;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MessageWrapper\");\n$RefreshReg$(_c2, \"Message\");\n$RefreshReg$(_c3, \"Web3ReactManager\");","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/components/pages/Web3ReactManager.tsx"],"names":["React","useState","useEffect","useWeb3React","styled","network","useEagerConnect","useInactiveListener","NetworkContextName","Loader","MessageWrapper","div","Message","h2","theme","secondary1","Web3ReactManager","children","active","networkActive","networkError","error","activateNetwork","activate","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,aAArD;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,cAAc,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,4EAApB;KAAMD,c;AAON,IAAME,OAAO,GAAGR,MAAM,CAACS,EAAV;AAAA;AAAA;AAAA,oBACF;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,UAArB;AAAA,CADE,CAAb;MAAMH,O;AAIN,OAAO,SAASI,gBAAT,QAAmE;AAAA;;AAAA,MAAvCC,QAAuC,SAAvCA,QAAuC;;AAAA,sBACrDd,YAAY,EADyC;AAAA,MAChEe,MADgE,iBAChEA,MADgE;;AAAA,uBAEUf,YAAY,CAACK,kBAAD,CAFtB;AAAA,MAExDW,aAFwD,kBAEhED,MAFgE;AAAA,MAElCE,YAFkC,kBAEzCC,KAFyC;AAAA,MAEVC,eAFU,kBAEpBC,QAFoB,EAIxE;;;AACA,MAAMC,UAAU,GAAGlB,eAAe,EAAlC,CALwE,CAOxE;;AACAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIsB,UAAU,IAAI,CAACL,aAAf,IAAgC,CAACC,YAAjC,IAAiD,CAACF,MAAtD,EAA8D;AAC5DI,MAAAA,eAAe,CAACjB,OAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACmB,UAAD,EAAaL,aAAb,EAA4BC,YAA5B,EAA0CE,eAA1C,EAA2DJ,MAA3D,CAJM,CAAT,CARwE,CAcxE;;AACAX,EAAAA,mBAAmB,CAAC,CAACiB,UAAF,CAAnB,CAfwE,CAiBxE;;AAjBwE,kBAkBpCvB,QAAQ,CAAC,KAAD,CAlB4B;AAAA,MAkBjEwB,UAlBiE;AAAA,MAkBrDC,aAlBqD;;AAmBxExB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMyB,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAFyB,EAEvB,GAFuB,CAA1B;AAIA,WAAO,YAAM;AACXG,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GARQ,EAQN,EARM,CAAT,CAnBwE,CA6BxE;;AACA,MAAI,CAACH,UAAL,EAAiB;AACf,WAAO,IAAP;AACD,GAhCuE,CAkCxE;;;AACA,MAAI,CAACN,MAAD,IAAWE,YAAf,EAA6B;AAC3B,wBACE,QAAC,cAAD;AAAA,6BACE,QAAC,OAAD;AAAA,kBAAU;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAzCuE,CA2CxE;;;AACA,MAAI,CAACF,MAAD,IAAW,CAACC,aAAhB,EAA+B;AAC7B,WAAOM,UAAU,gBACf,QAAC,cAAD;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADe,GAIb,IAJJ;AAKD;;AAED,SAAOR,QAAP;AACD;;GArDeD,gB;UACKb,Y,EAC+DA,Y,EAG/DG,e,EAUnBC,mB;;;MAfcS,gB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\n\nimport { network } from '../../connectors'\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\nimport { NetworkContextName } from '../../constants'\nimport Loader from '../Loader'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.secondary1};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{'unknownError'}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        <Loader />\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n"]},"metadata":{},"sourceType":"module"}