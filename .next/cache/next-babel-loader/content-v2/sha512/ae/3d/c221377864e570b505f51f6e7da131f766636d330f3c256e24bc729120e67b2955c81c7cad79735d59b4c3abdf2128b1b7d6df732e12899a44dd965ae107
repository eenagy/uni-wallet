{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport copy from 'copy-to-clipboard';\nimport { useCallback, useEffect, useState } from 'react';\nexport default function useCopyClipboard() {\n  _s();\n\n  var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500;\n\n  var _useState = useState(false),\n      isCopied = _useState[0],\n      setIsCopied = _useState[1];\n\n  var staticCopy = useCallback(function (text) {\n    var didCopy = copy(text);\n    setIsCopied(didCopy);\n  }, []);\n  useEffect(function () {\n    if (isCopied) {\n      var hide = setTimeout(function () {\n        setIsCopied(false);\n      }, timeout);\n      return function () {\n        clearTimeout(hide);\n      };\n    }\n\n    return undefined;\n  }, [isCopied, setIsCopied, timeout]);\n  return [isCopied, staticCopy];\n}\n\n_s(useCopyClipboard, \"nkQc2yPmr1zFy+6bENSAWQE+bA0=\");","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/hooks/useCopyClipboard.tsx"],"names":["copy","useCallback","useEffect","useState","useCopyClipboard","timeout","isCopied","setIsCopied","staticCopy","text","didCopy","hide","setTimeout","clearTimeout","undefined"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,eAAe,SAASC,gBAAT,GAA8E;AAAA;;AAAA,MAApDC,OAAoD,uEAA1C,GAA0C;;AAAA,kBAC3DF,QAAQ,CAAC,KAAD,CADmD;AAAA,MACpFG,QADoF;AAAA,MAC1EC,WAD0E;;AAG3F,MAAMC,UAAU,GAAGP,WAAW,CAAC,UAAAQ,IAAI,EAAI;AACrC,QAAMC,OAAO,GAAGV,IAAI,CAACS,IAAD,CAApB;AACAF,IAAAA,WAAW,CAACG,OAAD,CAAX;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAKAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAII,QAAJ,EAAc;AACZ,UAAMK,IAAI,GAAGC,UAAU,CAAC,YAAM;AAC5BL,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD,OAFsB,EAEpBF,OAFoB,CAAvB;AAIA,aAAO,YAAM;AACXQ,QAAAA,YAAY,CAACF,IAAD,CAAZ;AACD,OAFD;AAGD;;AACD,WAAOG,SAAP;AACD,GAXQ,EAWN,CAACR,QAAD,EAAWC,WAAX,EAAwBF,OAAxB,CAXM,CAAT;AAaA,SAAO,CAACC,QAAD,EAAWE,UAAX,CAAP;AACD;;GAtBuBJ,gB","sourcesContent":["import copy from 'copy-to-clipboard'\nimport { useCallback, useEffect, useState } from 'react'\n\nexport default function useCopyClipboard(timeout = 500): [boolean, (toCopy: string) => void] {\n  const [isCopied, setIsCopied] = useState(false)\n\n  const staticCopy = useCallback(text => {\n    const didCopy = copy(text)\n    setIsCopied(didCopy)\n  }, [])\n\n  useEffect(() => {\n    if (isCopied) {\n      const hide = setTimeout(() => {\n        setIsCopied(false)\n      }, timeout)\n\n      return () => {\n        clearTimeout(hide)\n      }\n    }\n    return undefined\n  }, [isCopied, setIsCopied, timeout])\n\n  return [isCopied, staticCopy]\n}\n"]},"metadata":{},"sourceType":"module"}