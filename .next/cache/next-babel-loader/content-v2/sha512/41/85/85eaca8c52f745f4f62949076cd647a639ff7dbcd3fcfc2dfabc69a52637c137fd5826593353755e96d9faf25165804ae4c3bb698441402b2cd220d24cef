{"ast":null,"code":"import _createClass from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _regeneratorRuntime from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _wrapNativeSuper from \"/Users/admin/workspace/smart_contracts/uni-wallet/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nvar RequestError = /*#__PURE__*/function (_Error) {\n  _inherits(RequestError, _Error);\n\n  var _super = _createSuper(RequestError);\n\n  function RequestError(message, code, data) {\n    var _this;\n\n    _classCallCheck(this, RequestError);\n\n    _this = _super.call(this, message);\n    _this.code = code;\n    _this.data = data;\n    return _this;\n  }\n\n  return RequestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar MiniRpcProvider = function MiniRpcProvider(chainId, url, batchWaitTimeMs) {\n  var _this2 = this;\n\n  _classCallCheck(this, MiniRpcProvider);\n\n  _defineProperty(this, \"isMetaMask\", false);\n\n  _defineProperty(this, \"chainId\", void 0);\n\n  _defineProperty(this, \"url\", void 0);\n\n  _defineProperty(this, \"host\", void 0);\n\n  _defineProperty(this, \"path\", void 0);\n\n  _defineProperty(this, \"batchWaitTimeMs\", void 0);\n\n  _defineProperty(this, \"nextId\", 1);\n\n  _defineProperty(this, \"batchTimeoutId\", null);\n\n  _defineProperty(this, \"batch\", []);\n\n  _defineProperty(this, \"clearBatch\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var batch, response, json, byKey, _iterator, _step, _result, _byKey$_result$id, resolve, reject, method, _result$error, _result$error2, _result$error3;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.debug('Clearing batch', _this2.batch);\n            batch = _this2.batch;\n            _this2.batch = [];\n            _this2.batchTimeoutId = null;\n            _context.prev = 4;\n            _context.next = 7;\n            return fetch(_this2.url, {\n              method: 'POST',\n              headers: {\n                'content-type': 'application/json',\n                accept: 'application/json'\n              },\n              body: JSON.stringify(batch.map(function (item) {\n                return item.request;\n              }))\n            });\n\n          case 7:\n            response = _context.sent;\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](4);\n            batch.forEach(function (_ref2) {\n              var reject = _ref2.reject;\n              return reject(new Error('Failed to send batch call'));\n            });\n            return _context.abrupt(\"return\");\n\n          case 14:\n            if (response.ok) {\n              _context.next = 17;\n              break;\n            }\n\n            batch.forEach(function (_ref3) {\n              var reject = _ref3.reject;\n              return reject(new RequestError(\"\".concat(response.status, \": \").concat(response.statusText), -32000));\n            });\n            return _context.abrupt(\"return\");\n\n          case 17:\n            _context.prev = 17;\n            _context.next = 20;\n            return response.json();\n\n          case 20:\n            json = _context.sent;\n            _context.next = 27;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t1 = _context[\"catch\"](17);\n            batch.forEach(function (_ref4) {\n              var reject = _ref4.reject;\n              return reject(new Error('Failed to parse JSON response'));\n            });\n            return _context.abrupt(\"return\");\n\n          case 27:\n            byKey = batch.reduce(function (memo, current) {\n              memo[current.request.id] = current;\n              return memo;\n            }, {});\n            _iterator = _createForOfIteratorHelper(json);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                _result = _step.value;\n                _byKey$_result$id = byKey[_result.id], resolve = _byKey$_result$id.resolve, reject = _byKey$_result$id.reject, method = _byKey$_result$id.request.method;\n\n                if (resolve && reject) {\n                  if ('error' in _result) {\n                    reject(new RequestError(_result === null || _result === void 0 ? void 0 : (_result$error = _result.error) === null || _result$error === void 0 ? void 0 : _result$error.message, _result === null || _result === void 0 ? void 0 : (_result$error2 = _result.error) === null || _result$error2 === void 0 ? void 0 : _result$error2.code, _result === null || _result === void 0 ? void 0 : (_result$error3 = _result.error) === null || _result$error3 === void 0 ? void 0 : _result$error3.data));\n                  } else if ('result' in _result) {\n                    resolve(_result.result);\n                  } else {\n                    reject(new RequestError(\"Received unexpected JSON-RPC response to \".concat(method, \" request.\"), -32000, _result));\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 10], [17, 23]]);\n  })));\n\n  _defineProperty(this, \"sendAsync\", function (request, callback) {\n    _this2.request(request.method, request.params).then(function (result) {\n      return callback(null, {\n        jsonrpc: '2.0',\n        id: request.id,\n        result: result\n      });\n    })[\"catch\"](function (error) {\n      return callback(error, null);\n    });\n  });\n\n  _defineProperty(this, \"request\", /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(method, params) {\n      var _this2$batchTimeoutId;\n\n      var promise;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof method !== 'string')) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", _this2.request(method.method, method.params));\n\n            case 2:\n              if (!(method === 'eth_chainId')) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", \"0x\".concat(_this2.chainId.toString(16)));\n\n            case 4:\n              promise = new Promise(function (resolve, reject) {\n                _this2.batch.push({\n                  request: {\n                    jsonrpc: '2.0',\n                    id: _this2.nextId++,\n                    method: method,\n                    params: params\n                  },\n                  resolve: resolve,\n                  reject: reject\n                });\n              });\n              _this2.batchTimeoutId = (_this2$batchTimeoutId = _this2.batchTimeoutId) !== null && _this2$batchTimeoutId !== void 0 ? _this2$batchTimeoutId : setTimeout(_this2.clearBatch, _this2.batchWaitTimeMs);\n              return _context2.abrupt(\"return\", promise);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n\n  this.chainId = chainId;\n  this.url = url;\n  console.log(url);\n  var parsed = new URL(url);\n  this.host = parsed.host;\n  this.path = parsed.pathname; // how long to wait to batch calls\n\n  this.batchWaitTimeMs = batchWaitTimeMs !== null && batchWaitTimeMs !== void 0 ? batchWaitTimeMs : 50;\n};\n\nexport var NetworkConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inherits(NetworkConnector, _AbstractConnector);\n\n  var _super2 = _createSuper(NetworkConnector);\n\n  function NetworkConnector(_ref6) {\n    var _this3;\n\n    var urls = _ref6.urls,\n        defaultChainId = _ref6.defaultChainId;\n\n    _classCallCheck(this, NetworkConnector);\n\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url');\n    _this3 = _super2.call(this, {\n      supportedChainIds: Object.keys(urls).map(function (k) {\n        return Number(k);\n      })\n    });\n\n    _defineProperty(_assertThisInitialized(_this3), \"providers\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this3), \"currentChainId\", void 0);\n\n    _this3.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    console.log(urls);\n    _this3.providers = Object.keys(urls).reduce(function (accumulator, chainId) {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)]);\n      return accumulator;\n    }, {});\n    return _this3;\n  }\n\n  _createClass(NetworkConnector, [{\n    key: \"activate\",\n    value: function () {\n      var _activate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", {\n                  provider: this.providers[this.currentChainId],\n                  chainId: this.currentChainId,\n                  account: null\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function activate() {\n        return _activate.apply(this, arguments);\n      }\n\n      return activate;\n    }()\n  }, {\n    key: \"getProvider\",\n    value: function () {\n      var _getProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.providers[this.currentChainId]);\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getProvider() {\n        return _getProvider.apply(this, arguments);\n      }\n\n      return getProvider;\n    }()\n  }, {\n    key: \"getChainId\",\n    value: function () {\n      var _getChainId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.currentChainId);\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getChainId() {\n        return _getChainId.apply(this, arguments);\n      }\n\n      return getChainId;\n    }()\n  }, {\n    key: \"getAccount\",\n    value: function () {\n      var _getAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", null);\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getAccount() {\n        return _getAccount.apply(this, arguments);\n      }\n\n      return getAccount;\n    }()\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      return;\n    }\n  }, {\n    key: \"provider\",\n    get: function get() {\n      return this.providers[this.currentChainId];\n    }\n  }]);\n\n  return NetworkConnector;\n}(AbstractConnector);","map":{"version":3,"sources":["/Users/admin/workspace/smart_contracts/uni-wallet/src/connectors/NetworkConnector.ts"],"names":["AbstractConnector","invariant","RequestError","message","code","data","Error","MiniRpcProvider","chainId","url","batchWaitTimeMs","console","debug","batch","batchTimeoutId","fetch","method","headers","accept","body","JSON","stringify","map","item","request","response","forEach","reject","ok","status","statusText","json","byKey","reduce","memo","current","id","result","resolve","error","callback","params","then","jsonrpc","toString","promise","Promise","push","nextId","setTimeout","clearBatch","log","parsed","URL","host","path","pathname","NetworkConnector","urls","defaultChainId","Object","keys","length","supportedChainIds","k","Number","currentChainId","providers","accumulator","provider","account"],"mappings":"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","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\ninterface NetworkConnectorArguments {\n  urls: { [chainId: number]: string }\n  defaultChainId?: number\n}\n\n// taken from ethers.js, compatible interface with web3 provider\ntype AsyncSendable = {\n  isMetaMask?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (request: any, callback: (error: any, response: any) => void) => void\n  send?: (request: any, callback: (error: any, response: any) => void) => void\n}\n\nclass RequestError extends Error {\n  constructor(message: string, public code: number, public data?: unknown) {\n    super(message)\n  }\n}\n\ninterface BatchItem {\n  request: { jsonrpc: '2.0'; id: number; method: string; params: unknown }\n  resolve: (result: any) => void\n  reject: (error: Error) => void\n}\n\nclass MiniRpcProvider implements AsyncSendable {\n  public readonly isMetaMask: false = false\n  public readonly chainId: number\n  public readonly url: string\n  public readonly host: string\n  public readonly path: string\n  public readonly batchWaitTimeMs: number\n\n  private nextId = 1\n  private batchTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private batch: BatchItem[] = []\n\n  constructor(chainId: number, url: string, batchWaitTimeMs?: number) {\n    this.chainId = chainId\n    this.url = url\n    console.log(url)\n    const parsed = new URL(url)\n    this.host = parsed.host\n    this.path = parsed.pathname\n    // how long to wait to batch calls\n    this.batchWaitTimeMs = batchWaitTimeMs ?? 50\n  }\n\n  public readonly clearBatch = async () => {\n    console.debug('Clearing batch', this.batch)\n    const batch = this.batch\n    this.batch = []\n    this.batchTimeoutId = null\n    let response: Response\n    try {\n      response = await fetch(this.url, {\n        method: 'POST',\n        headers: { 'content-type': 'application/json', accept: 'application/json' },\n        body: JSON.stringify(batch.map(item => item.request))\n      })\n    } catch (error) {\n      batch.forEach(({ reject }) => reject(new Error('Failed to send batch call')))\n      return\n    }\n\n    if (!response.ok) {\n      batch.forEach(({ reject }) => reject(new RequestError(`${response.status}: ${response.statusText}`, -32000)))\n      return\n    }\n\n    let json\n    try {\n      json = await response.json()\n    } catch (error) {\n      batch.forEach(({ reject }) => reject(new Error('Failed to parse JSON response')))\n      return\n    }\n    const byKey = batch.reduce<{ [id: number]: BatchItem }>((memo, current) => {\n      memo[current.request.id] = current\n      return memo\n    }, {})\n    for (const result of json) {\n      const {\n        resolve,\n        reject,\n        request: { method }\n      } = byKey[result.id]\n      if (resolve && reject) {\n        if ('error' in result) {\n          reject(new RequestError(result?.error?.message, result?.error?.code, result?.error?.data))\n        } else if ('result' in result) {\n          resolve(result.result)\n        } else {\n          reject(new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, result))\n        }\n      }\n    }\n  }\n\n  public readonly sendAsync = (\n    request: { jsonrpc: '2.0'; id: number | string | null; method: string; params?: unknown[] | object },\n    callback: (error: any, response: any) => void\n  ): void => {\n    this.request(request.method, request.params)\n      .then(result => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch(error => callback(error, null))\n  }\n\n  public readonly request = async (\n    method: string | { method: string; params: unknown[] },\n    params?: unknown[] | object\n  ): Promise<unknown> => {\n    if (typeof method !== 'string') {\n      return this.request(method.method, method.params)\n    }\n    if (method === 'eth_chainId') {\n      return `0x${this.chainId.toString(16)}`\n    }\n    const promise = new Promise((resolve, reject) => {\n      this.batch.push({\n        request: {\n          jsonrpc: '2.0',\n          id: this.nextId++,\n          method,\n          params\n        },\n        resolve,\n        reject\n      })\n    })\n    this.batchTimeoutId = this.batchTimeoutId ?? setTimeout(this.clearBatch, this.batchWaitTimeMs)\n    return promise\n  }\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  private readonly providers: { [chainId: number]: MiniRpcProvider }\n  private currentChainId: number\n\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url')\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) })\n\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0])\n    console.log(urls)\n    this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)])\n      return accumulator\n    }, {})\n  }\n\n  public get provider(): MiniRpcProvider {\n    return this.providers[this.currentChainId]\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null }\n  }\n\n  public async getProvider(): Promise<MiniRpcProvider> {\n    return this.providers[this.currentChainId]\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.currentChainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return null\n  }\n\n  public deactivate() {\n    return\n  }\n}\n"]},"metadata":{},"sourceType":"module"}